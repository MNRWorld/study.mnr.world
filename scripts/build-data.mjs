import fs from "fs/promises";
import path from "path";
import { glob } from "glob";
import chokidar from "chokidar";

const DATA_DIR = path.resolve(process.cwd(), "src/lib/data/universities");
const PUBLIC_UNI_LIST_PATH = path.join(DATA_DIR, "public-universities.json");
const PRIVATE_UNI_LIST_PATH = path.join(DATA_DIR, "private-universities.json");
const OUTPUT_FILE = path.join(DATA_DIR, "_generated.ts");
const INFO_FILE_PATTERN = path.join(DATA_DIR, "**/info.json");

async function buildUniversityData() {
  console.log("🚀 Starting university data build...");

  try {
    const [publicUniList, privateUniList, infoFilePaths] = await Promise.all([
      fs.readFile(PUBLIC_UNI_LIST_PATH, "utf-8").then(JSON.parse),
      fs.readFile(PRIVATE_UNI_LIST_PATH, "utf-8").then(JSON.parse),
      glob(INFO_FILE_PATTERN),
    ]);

    const allBaseUniversities = [...publicUniList, ...privateUniList];

    const infoDataPromises = infoFilePaths.map(async (filePath) => {
      const content = await fs.readFile(filePath, "utf-8");
      // Check for empty or invalid JSON to avoid errors
      if (content.trim() === "" || content.trim() === "{}") {
        return null;
      }
      try {
        const jsonContent = JSON.parse(content);
        const uniId = path.basename(path.dirname(filePath));
        return { id: uniId, ...jsonContent };
      } catch (e) {
        console.error(`❌ Error parsing JSON from ${filePath}:`, e);
        return null;
      }
    });

    const allInfoData = (await Promise.all(infoDataPromises)).filter(Boolean);
    const infoDataMap = new Map(allInfoData.map((d) => [d.id, d]));

    const combinedData = allBaseUniversities.map((uni) => {
      const extraInfo = infoDataMap.get(uni.id) || {};
      return { ...uni, ...extraInfo };
    });

    const fileContent = `// This file is auto-generated by scripts/build-data.mjs
// Do not edit this file directly.

export const allUniversityData = ${JSON.stringify(combinedData, null, 2)};
`;

    await fs.writeFile(OUTPUT_FILE, fileContent, "utf-8");
    console.log(
      `✅ Successfully built university data for ${combinedData.length} universities.`,
    );
  } catch (error) {
    console.error("❌ Error building university data:", error);
    // Create an empty generated file on error to prevent build failures
    const errorFileContent = `// Auto-generation failed. Check build logs.
export const allUniversityData = [];
`;
    await fs.writeFile(OUTPUT_FILE, errorFileContent, "utf-8").catch(e => {
        console.error("❌ Failed to write error fallback file:", e);
    });
  }
}

// Check for --watch flag
const shouldWatch = process.argv.includes("--watch");

if (shouldWatch) {
  console.log("👀 Watching for changes in university data files...");
  const watcher = chokidar.watch(
    [
      PUBLIC_UNI_LIST_PATH,
      PRIVATE_UNI_LIST_PATH,
      INFO_FILE_PATTERN,
    ],
    {
      ignored: /(^|[\/\\])\../, // ignore dotfiles
      persistent: true,
    },
  );

  watcher.on("change", (path) => {
    console.log(`\n🔄 File changed: ${path}`);
    buildUniversityData();
  });
  
  // Initial build
  buildUniversityData();

} else {
  buildUniversityData();
}
