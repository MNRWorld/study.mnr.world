// scripts/build-data.mjs
import fs from "fs/promises";
import path from "path";
import { glob } from "glob";
import chokidar from "chokidar";

const DATA_DIR = path.resolve(process.cwd(), "src/lib/data/universities");
const OUTPUT_FILE = path.resolve(DATA_DIR, "_generated.ts");
const WATCH_MODE = process.argv.includes("--watch");

async function buildUniversityData() {
  console.log("🚀 Starting university data build...");

  try {
    const publicUnisPath = path.join(DATA_DIR, "public-universities.json");
    const privateUnisPath = path.join(DATA_DIR, "private-universities.json");

    const [publicUnisContent, privateUnisContent] = await Promise.all([
      fs.readFile(publicUnisPath, "utf-8"),
      fs.readFile(privateUnisPath, "utf-8"),
    ]);

    const publicUniversities = JSON.parse(publicUnisContent);
    const privateUniversities = JSON.parse(privateUnisContent);
    const allUnis = [...publicUniversities, ...privateUniversities];

    const infoFiles = await glob(`${DATA_DIR}/**/info.json`);

    const infoDataMap = new Map();
    await Promise.all(
      infoFiles.map(async (file) => {
        const id = path.basename(path.dirname(file));
        try {
          const content = await fs.readFile(file, "utf-8");
          // Check for empty or invalid JSON
          if (content.trim()) {
            infoDataMap.set(id, JSON.parse(content));
          } else {
            console.warn(`⚠️ Warning: Empty or invalid JSON in ${file}`);
            infoDataMap.set(id, {});
          }
        } catch (err) {
          console.error(`❌ Error reading or parsing ${file}:`, err);
          infoDataMap.set(id, {}); // Set empty object on error
        }
      }),
    );

    const allUniversityData = allUnis.map((uni) => ({
      ...uni,
      ...(infoDataMap.get(uni.id) || {}),
    }));

    const fileContent = `// This file is auto-generated by scripts/build-data.mjs. Do not edit manually.\n\nexport const allUniversityData = ${JSON.stringify(
      allUniversityData,
      null,
      2,
    )};\n`;

    await fs.writeFile(OUTPUT_FILE, fileContent, "utf-8");
    console.log(
      `✅ Successfully built university data for ${allUniversityData.length} universities.`,
    );
  } catch (error) {
    console.error("❌ Error building university data:", error);
    process.exit(1);
  }
}

async function main() {
  await buildUniversityData();

  if (WATCH_MODE) {
    console.log("👀 Watching for changes in university data files...");
    const watcher = chokidar.watch(
      [
        `${DATA_DIR}/**/*.json`,
        `!${DATA_DIR}/_generated.ts`, // Exclude the output file itself
      ],
      {
        ignored: /(^|[\/\\])\../, // ignore dotfiles
        persistent: true,
      },
    );

    watcher.on("change", async (filePath) => {
      console.log(`\n🔄 File changed: ${path.basename(filePath)}`);
      await buildUniversityData();
    });
  }
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
